apply plugin: 'maven'

repositories {
    flatDir {
        name "fileRepo"
        dirs "/home/signed/tmp/repository"
    }
}

def versionBase = '2.2.0'
def versionQualifier = 'beta-10'
def myVersion = versionBase+'-'+versionQualifier


def baseDirectoryVersion = 'javafx-extracted/sdk_'+versionBase+'/'+versionQualifier
def platformDirectoryLinux   = baseDirectoryVersion+'/linux-i586/rt/lib/i386'
def platformDirectoryWindows = baseDirectoryVersion+'/windows-i586/rt/bin'
def runtimeJarFileLinux = baseDirectoryVersion + '/linux-i586/rt/lib/jfxrt.jar'
def runtimeJarFileWindows = baseDirectoryVersion + '/windows-i586/rt/lib/jfxrt.jar'

file("$buildDir/output/classes").createDirectory()

task platformZipLinux(type: Zip) {
    from platformDirectoryLinux
    into('')
    baseName = 'javafx-platform'
    version = myVersion
    classifier = 'linux'
}

task platformZipWindows(type: Zip) {
    from platformDirectoryWindows
    into('')
    baseName = 'javafx-platform'
    version = myVersion
    classifier = 'windows'
}


artifacts {
    archives platformZipLinux, platformZipWindows

    archives(file(runtimeJarFileLinux)){
        name = 'javafx-runtime-jar'
        classifier = 'linux'
    }

    archives( file(runtimeJarFileWindows)){
        name = 'javafx-runtime-jar'
        classifier = 'windows'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///home/signed/tmp/repository/releases/")
            snapshotRepository(url: "file:///home/signed/tmp/repository/snapshots/")

            addFilter('runtime-linux') {artifact, file ->
                def match = artifact.name == 'javafx-runtime-jar' && file.path.contains( 'linux' )
                println "runtime-linux   :"+ match.toString() +":"+ file
                return match
            }

            addFilter('runtime-windows') {artifact, file ->
                def match = artifact.name == 'javafx-runtime-jar' && file.path.contains('windows')
                println "runtime-windows :"+ match.toString() +":"+ file
                return match;
            }

            addFilter('platform-linux') {artifact, file ->
                def match = artifact.name == 'javafx-platform' && file.path.contains('linux')
                println "platform-linux  :"+ match.toString() +":"+ file
                return match
            }

            addFilter('platform-windows') {artifact, file ->
                def match = artifact.name == 'javafx-platform' && file.path.contains('windows')
                println "platform-windows:"+ match.toString() +":"+ file
                return match
            }

            pom('runtime-linux').groupId = 'com.oracle.javafx'
            pom('runtime-linux').artifactId = 'javafx-platform'
            pom('runtime-linux').version = myVersion
            pom('runtime-linux').packaging = 'jar'

            pom('runtime-windows').groupId = 'com.oracle.javafx'
            pom('runtime-windows').artifactId = 'javafx-platform'
            pom('runtime-windows').version = myVersion
            pom('runtime-windows').packaging = 'jar'

            pom('platform-linux').groupId = 'com.oracle.javafx'
            pom('platform-linux').artifactId = 'javafx-runtime'
            pom('platform-linux').version = myVersion
            pom('platform-linux').packaging = 'zip'

            pom('platform-windows').groupId = 'com.oracle.javafx'
            pom('platform-windows').artifactId = 'javafx-runtime'
            pom('platform-windows').version = myVersion
            pom('platform-windows').packaging = 'zip'
        }
    }
}
